$date
	Fri Dec 02 15:15:34 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_tb $end
$var reg 1 ! Clock $end
$var reg 32 " Instrword [31:0] $end
$var reg 1 # Newinstr $end
$var reg 1 $ Reset $end
$scope module mycpu $end
$var wire 1 ! clk $end
$var wire 32 % instrword [31:0] $end
$var wire 1 # newinstr $end
$var wire 1 $ reset $end
$var wire 5 & towriteregistercpu [4:0] $end
$var wire 32 ' signextresultcpu [31:0] $end
$var wire 16 ( signExtendercpu [15:0] $end
$var wire 1 ) regwritecpu $end
$var wire 1 * regdstcpu $end
$var wire 32 + readdata2cpu [31:0] $end
$var wire 32 , readdata1cpu [31:0] $end
$var wire 32 - readdata [31:0] $end
$var wire 5 . readReg2cpu [20:16] $end
$var wire 5 / readReg1cpu [25:21] $end
$var wire 32 0 outputtoregwrite [31:0] $end
$var wire 6 1 opcodecpu [31:26] $end
$var wire 32 2 op2alu [31:0] $end
$var wire 5 3 mux1rdcpu [15:11] $end
$var wire 1 4 memwritecpu $end
$var wire 1 5 memtoregcpu $end
$var wire 1 6 memreadcpu $end
$var wire 1 7 branchcpu $end
$var wire 1 8 alusrccpu $end
$var wire 32 9 aluresultcpu [31:0] $end
$var wire 2 : aluopcpu [1:0] $end
$var wire 6 ; alufunctioncpu [5:0] $end
$var wire 4 < aluctrltoalu [3:0] $end
$scope module alucontrolcpu $end
$var wire 6 = Function [5:0] $end
$var wire 2 > ALUOp [1:0] $end
$var reg 4 ? Output [3:0] $end
$upscope $end
$scope module alucpu $end
$var wire 4 @ ctrl [3:0] $end
$var wire 32 A op2 [31:0] $end
$var wire 32 B op1 [31:0] $end
$var reg 32 C result3 [31:0] $end
$upscope $end
$scope module controlcpu $end
$var wire 1 ! clock $end
$var wire 1 # newinstr $end
$var wire 1 $ rst $end
$var wire 6 D Opcode [5:0] $end
$var reg 2 E ALUOp [1:0] $end
$var reg 1 8 ALUSrc $end
$var reg 1 7 Branch $end
$var reg 1 6 MemtoRead $end
$var reg 1 5 MemtoReg $end
$var reg 1 4 MemtoWrite $end
$var reg 1 * RegDst $end
$var reg 1 ) RegWrite $end
$upscope $end
$scope module cpusignextender $end
$var wire 32 F outputVal [31:0] $end
$var wire 16 G inputVal [15:0] $end
$upscope $end
$scope module insmemcpu $end
$var wire 32 H inputVal [31:0] $end
$var wire 6 I instruct1 [31:26] $end
$var wire 5 J instruct2 [25:21] $end
$var wire 5 K instruct3 [20:16] $end
$var wire 5 L instruct4 [15:11] $end
$var wire 16 M instruct5 [15:0] $end
$var wire 6 N instruct6 [5:0] $end
$var wire 1 # newinstruction $end
$var reg 6 O inInstruct1 [5:0] $end
$var reg 5 P inInstruct2 [4:0] $end
$var reg 5 Q inInstruct3 [4:0] $end
$var reg 5 R inInstruct4 [4:0] $end
$var reg 16 S inInstruct5 [15:0] $end
$var reg 6 T inInstruct6 [5:0] $end
$upscope $end
$scope module memcpu $end
$var wire 32 U addr [31:0] $end
$var wire 1 6 rdctrl $end
$var wire 1 $ rst $end
$var wire 1 4 wrctrl $end
$var wire 32 V wrdata [31:0] $end
$var reg 32 W rddata [31:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module muxAlusrccpu $end
$var wire 1 8 ALUSrc $end
$var wire 32 Y result2 [31:0] $end
$var wire 32 Z result [31:0] $end
$var wire 32 [ outputval2 [31:0] $end
$upscope $end
$scope module muxRegDestcpu $end
$var wire 1 * RegDestination $end
$var wire 5 \ input1 [4:0] $end
$var wire 5 ] input2 [4:0] $end
$var wire 5 ^ outputval [4:0] $end
$upscope $end
$scope module muxmemtoregcpu $end
$var wire 1 5 memtoReg $end
$var wire 32 _ outputval3 [31:0] $end
$var wire 32 ` solution [31:0] $end
$var wire 32 a solution2 [31:0] $end
$var reg 32 b inoutpu [31:0] $end
$upscope $end
$scope module registerfilecpu $end
$var wire 5 c readReg1 [4:0] $end
$var wire 5 d readReg2 [4:0] $end
$var wire 1 ) regWrite $end
$var wire 1 $ rst $end
$var wire 32 e writeData [31:0] $end
$var wire 5 f writeReg [4:0] $end
$var reg 32 g readData1 [31:0] $end
$var reg 32 h readData2 [31:0] $end
$var integer 32 i i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
b10000000 X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
b10001100000000010000000000000000 H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
x7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
x*
x)
bx (
bx '
bx &
b10001100000000010000000000000000 %
0$
0#
b10001100000000010000000000000000 "
0!
$end
#1
b1010 0
b1010 _
b1010 e
b1010 b
b1010 -
b1010 W
b1010 `
1)
16
b0 9
b0 C
b0 U
b0 a
b0 2
b0 A
b0 [
b1 &
b1 ^
b1 f
b0 +
b0 V
b0 Z
b0 h
b0 ,
b0 B
b0 g
b0 :
b0 >
b0 E
07
05
18
0*
b0 ;
b0 =
b0 N
b0 T
b0 '
b0 F
b0 Y
b0 (
b0 G
b0 M
b0 S
b0 3
b0 L
b0 R
b0 ]
b1 .
b1 K
b1 Q
b1 \
b1 d
b0 /
b0 J
b0 c
b0 P
b100011 1
b100011 D
b100011 I
b100011 O
1#
1!
#2
04
06
0#
0!
#3
16
1!
#4
0)
0!
b10 <
b10 ?
b10 @
#5
1)
1!
#6
0!
#7
1!
#8
0!
#9
18
1!
#10
0!
#11
1!
#12
0!
b10001100000000100000000000000001 "
b10001100000000100000000000000001 %
b10001100000000100000000000000001 H
#13
1!
1#
#14
06
0!
0#
#15
b10110 0
b10110 _
b10110 e
b10110 b
b10110 -
b10110 W
b10110 `
16
b1 9
b1 C
b1 U
b1 a
b1 2
b1 A
b1 [
b10 &
b10 ^
b10 f
b1 ;
b1 =
b1 N
b1 T
b1 '
b1 F
b1 Y
b1 (
b1 G
b1 M
b1 S
b10 .
b10 K
b10 Q
b10 \
b10 d
1!
#16
0)
0!
#17
1)
1!
#18
0!
#19
1!
#20
0!
#21
18
1!
#22
0!
#23
1!
#24
0!
b10001100000000110000000000000010 "
b10001100000000110000000000000010 %
b10001100000000110000000000000010 H
#25
1!
1#
#26
06
0!
0#
#27
b110 0
b110 _
b110 e
b110 b
b110 -
b110 W
b110 `
16
b10 9
b10 C
b10 U
b10 a
b10 2
b10 A
b10 [
b11 &
b11 ^
b11 f
b10 ;
b10 =
b10 N
b10 T
b10 '
b10 F
b10 Y
b10 (
b10 G
b10 M
b10 S
b11 .
b11 K
b11 Q
b11 \
b11 d
1!
#28
0)
0!
#29
1)
1!
#30
0!
#31
1!
#32
0!
#33
18
1!
#34
0!
#35
1!
#36
0!
b1000100010000000100000 "
b1000100010000000100000 %
b1000100010000000100000 H
#37
1!
1#
#38
06
0!
0#
#39
b100000 0
b100000 _
b100000 e
b100000 b
b100000 9
b100000 C
b100000 U
b100000 a
b10110 2
b10110 A
b10110 [
b100 &
b100 ^
b100 f
b10110 +
b10110 V
b10110 Z
b10110 h
b1010 ,
b1010 B
b1010 g
08
b10 :
b10 >
b10 E
15
1*
b100000 ;
b100000 =
b100000 N
b100000 T
b10000000100000 '
b10000000100000 F
b10000000100000 Y
b10000000100000 (
b10000000100000 G
b10000000100000 M
b10000000100000 S
b100 3
b100 L
b100 R
b100 ]
b10 .
b10 K
b10 Q
b10 \
b10 d
b1 /
b1 J
b1 c
b1 P
b0 1
b0 D
b0 I
b0 O
1!
#40
0)
0!
#41
1)
1*
1!
#42
0!
#43
15
1!
#44
b0 :
b0 >
b0 E
0!
#45
b10 :
b10 >
b10 E
1!
#46
0!
#47
1!
#48
0!
b100000110010100000100010 "
b100000110010100000100010 %
b100000110010100000100010 H
#49
1!
1#
#50
0!
0#
#51
b100110 0
b100110 _
b100110 e
b100110 b
b110 2
b110 A
b110 [
b100110 9
b100110 C
b100110 U
b100110 a
b101 &
b101 ^
b101 f
b110 +
b110 V
b110 Z
b110 h
b100000 ,
b100000 B
b100000 g
b100010 ;
b100010 =
b100010 N
b100010 T
b10100000100010 '
b10100000100010 F
b10100000100010 Y
b10100000100010 (
b10100000100010 G
b10100000100010 M
b10100000100010 S
b101 3
b101 L
b101 R
b101 ]
b11 .
b11 K
b11 Q
b11 \
b11 d
b100 /
b100 J
b100 c
b100 P
1!
#52
0)
0!
#53
1)
1*
1!
#54
0!
#55
15
1!
#56
b0 :
b0 >
b0 E
0!
#57
b10 :
b10 >
b10 E
1!
#58
0!
#59
b11010 0
b11010 _
b11010 e
b11010 b
b11010 9
b11010 C
b11010 U
b11010 a
1!
b110 <
b110 ?
b110 @
#60
0!
#61
1!
b10101100000001010000000000000011 "
b10101100000001010000000000000011 %
b10101100000001010000000000000011 H
#62
0!
1#
#63
1!
0#
#64
b11111111111111111111111111100110 0
b11111111111111111111111111100110 _
b11111111111111111111111111100110 e
b11111111111111111111111111100110 b
b11010 2
b11010 A
b11010 [
b11111111111111111111111111100110 9
b11111111111111111111111111100110 C
b11111111111111111111111111100110 U
b11111111111111111111111111100110 a
b0 &
b0 ^
b0 f
b11010 +
b11010 V
b11010 Z
b11010 h
b0 ,
b0 B
b0 g
b11 ;
b11 =
b11 N
b11 T
b11 '
b11 F
b11 Y
b11 (
b11 G
b11 M
b11 S
b0 3
b0 L
b0 R
b0 ]
b101 .
b101 K
b101 Q
b101 \
b101 d
b0 /
b0 J
b0 c
b0 P
b101011 1
b101011 D
b101011 I
b101011 O
0!
#65
b11111111111111111111111111111101 0
b11111111111111111111111111111101 _
b11111111111111111111111111111101 e
b11111111111111111111111111111101 b
b11111111111111111111111111111101 9
b11111111111111111111111111111101 C
b11111111111111111111111111111101 U
b11111111111111111111111111111101 a
b11 2
b11 A
b11 [
b0 :
b0 >
b0 E
18
0)
1!
#66
b101 &
b101 ^
b101 f
0*
0!
#67
1!
#68
b110 0
b110 _
b110 e
b110 b
b11 9
b11 C
b11 U
b11 a
05
0!
b10 <
b10 ?
b10 @
#69
14
1!
#70
b11010 9
b11010 C
b11010 U
b11010 a
b11010 2
b11010 A
b11010 [
08
0!
#71
b11 9
b11 C
b11 U
b11 a
b11 2
b11 A
b11 [
18
1!
#72
0!
#73
1!
